# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Deploy

on:
  release:
    types: [ published ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.STRIMZI_CLI_VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Get release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get code version
        id: get_version
        run: echo "STRIMZI_CLI_VERSION=$(grep -m 1 'version' pyproject.toml | cut -d '=' -f 2 | xargs)" >> $GITHUB_ENV

      - name: Compare release and code version
        if: ${{ env.RELEASE_VERSION != env.STRIMZI_CLI_VERSION }}
        run: exit 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: make install-dependencies

      - name: Build
        run: make build

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
        continue-on-error: true

      - name: Sleep for 3 mins
        uses: jakejarvis/wait-action@master
        with:
          time: '180s'

      - name: Bake and push image
        uses: docker/build-push-action@v1.1.0
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        with:
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: quay.io
          repository: systemcraftsman/strimzi-kafka-cli
          tags: latest,${{ env.STRIMZI_CLI_VERSION }}
          path: .
          dockerfile: ./Dockerfile
          push: true
          build-args: |
            "KUBECONFIG_CONTENT=$KUBECONFIG_CONTENT"

  upload_build_data_artifact:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Write version
        run: |
          printf '{
              "version": ${{ needs.deploy.outputs.version }}
            }' >> build_data.json
      - uses: actions/upload-artifact@v3
        with:
          name: build_data.json
          path: ./
